/*
					#########################################
					#	==== Projet n°2 Algorithmique ====  #
					#				Tanguy BRON				#
					#			Groupe Scientifique : 5		#
					#########################################
*/

import java.util.Random;
import java.util.Arrays;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
class CCM{ // chemin de coût minimum (dans un graphe sans "circuit".)
	public static void main(String[] args){ 
		if (args.length != 2){
			System.out.println("CCM : chemin de coût minimum"); 
			System.out.println("Usage : CCM nombre_de_sommets_du_graphe nb_runs_validation_statistique"); 
			System.out.println("Exemple : CCM 10 1000 (graphes à 10 sommets, validation statistique 1000 ``runs'')");
			System.out.println("Exemple : CCM 10 0 (graphes à 10 sommets, pas de validation statistique)");
			return;
		}
		int n = Integer.parseInt(args[0]); // nombre de sommets du graphe
		LA[] g = grapheAleatoire(n);
		System.out.println("graphe G :");
		afficher(g);
		int[][] MA = calculerMA(g);
		int[] M = MA[0], A = MA[1];	
		System.out.println("M = " + Arrays.toString(M));
		System.out.println("A = " + Arrays.toString(A));			
		System.out.printf("Coût d'un chemin de coût minimum jusqu'en %d : %d\n", n-1, M[n-1]);
		acm(A,g,n-1); // affichage d'un chemin coût minimum de 0 à n-1
		System.out.println();			
		
		System.out.println("affichage des chemins de coût minimum de 0 à tous les sommets :");
		for (int j = 0; j<n; j++){
			if (A[j]!=j){
				acm(A,g,j); // affichage d'un chemin coût minimum de 0 à n-1
				System.out.printf(" coût = %d\n", M[j]);
			}
			else System.out.printf("Il n'y a pas de chemin de 0 à %d\n", j);
		}
		descriptionGraphViz(g,"g.graphviz");
		System.out.println("Description du graphe dans le fichier g.graphviz");
		System.out.printf(
			"Coût par minimisation locale = %d\n", 
			coutParMinimisationLocale(g)
		);

		/* Validation statistique */
		int nruns = Integer.parseInt(args[1]);
		if (nruns > 0){
			System.out.printf("Validation statistique à %d runs\n", nruns);
			float[] distancesRelatives = validationStatistique(n, nruns);
			System.out.printf(
				"Médiane des distances relatives : %f\n",
				medianeIterative(distancesRelatives)
			);
			System.out.printf(
				"Max des distances relatives : %f\n",
				max(distancesRelatives)
			);
		}
	}

	static int[][] calculerMA(LA[] g){ /* retourne un tableau MA={M,A} où M[0:n] est 
	de terme général M[j] = m(j) = coût minimum d'un chemin allant de 0 à j, et A = arg M. 
	S'il n'existe pas de chemin de 0 à j on pose m(j) = infini et arg m(j) = j */
		int n = g.length; 
		int[] M = new int[n], A = new int[n];
		LA[] Gprime = symetrique(g); // Gprime est le symétrique de g. 
		// prendre le symétrique permet de réduire la complexité du calcule.

		// base de la récurence :
		M[0] = 0; A[0] = 0;
	
		// cas général : 
		for(int j = 1; j < n; j++){
			M[j] = Integer.MAX_VALUE;
			for(LA las = Gprime[j]; !vide(las); las = las.reste()){
				int pij = las.cout(), i = las.sommet();
				if (!(M[i] == Integer.MAX_VALUE)){
					// l'arc n'est pas de coût infini <=> il y a donc un arc reliant les deux sommets
					int m0j = M[i] + pij;
					if(m0j < M[j]){
						M[j] = m0j;
						A[j] = i;
					}
				}
			}
		}
		return new int[][] {M,A};
	}
	static LA[] symetrique(LA[] g){ int n = g.length;
	// retourne le graphe g', symétrique du graphe g.
	// Le symétrique de g est le graphe dont les sommets restent inchangés, mais les directions des arcs inversés.
		LA[] Gprime = new LA[n];
		for (int i = 0; i<n; i++)
			for (LA l = g[i]; !vide(l); l = l.reste()){ int j = l.sommet();
				Gprime[j] = new LA(i, l.cout(),Gprime[j]);
			}
		return Gprime;
	}
	static void acm(int[] A, LA[] g, int j){
	// affiche un chemin de coût minimum du sommet 0 au sommet j
	
		// 0 ... i-(cij)->j ... n-1
		if (j == 0) {
			System.out.print("0"); // le chemin de coût minimum de 0 vers 0 est affiché.
			return;
		}
		// 1 ≤ j < n
		int aj = A[j]; // aj est la ville qui précède la ville j sur un chemin de coût minimum.
		// 0 ------------> aj -> j
		acm(A,g,aj); // 0 ------------> aj a été affiché
		System.out.printf("-(%d)->%d",coutArc(aj, j, g),j); // aj -> j a été affiché 
		// donc 0 ------------> aj -> j  a été affiché.
	}
	
	static int coutArc(int i, int j, LA[] g){
	/* retourne le coût de l'arc i -> j */
		int cost = Integer.MAX_VALUE;
		for (LA las = g[i]; !vide(las); las = las.reste()) { // On regarde tous les arcs du sommet i
			int pij = las.cout(); // On récupère le coût de l'arc
			int sommet = las.sommet(); // Le sommet vers lequel cet arc mène
			if(sommet == j){ // Il s'agit du sommet j (vers lequel on cherchait le cout)
				cost = pij;
				break; // On arrête la boucle car on a trouvé le bon arc.
			}
		}
		return cost;
	}

  	/* minimisation locale */
  	static int coutParMinimisationLocale(LA[] g){ int n = g.length;
   		// calcul du coût d'un chemin de coût local minimum. Retourne le coût d'un 
   		// chemin obtenu par minimisation locale.
		int somme = 0;
		int i = 0;
		while(i<n-1){ // n-1 car on ne s'intéresse pas au sommet 6 puisque ce dernier n'a évidemment pas d'arcs sortants
			LA las = g[i];
			// On récupère le coût minimal parmi tous les arcs sortants du sommet i.
			int [] coutEtArg = coutMin_et_argCoutMin(las);
			int min = coutEtArg[0], sommet = coutEtArg[1];

			// On ajoute le cout minimal de déplacement 
			somme += min;
			i = sommet; // On se place maintenant au niveau du sommet trouvé
		}
		return somme; // la somme totale du trajet par minimisation locale
 		
   	}
  	static int[] coutMin_et_argCoutMin(LA las){ // las : liste d'arcs sortant d'un sommet i
  	/* soit i --> j* l'arc sortant de i, de coût minimum c(i,j*) 
  	Cette fonction retourne c(i,j*) et j*.   */
	    int cijstar = Integer.MAX_VALUE; // cout minimal à infini
		int jstar = 0; // sommet
		for (LA las1 = las; !vide(las1); las1 = las1.reste()) {
			int pij = las1.cout(); // cout de l'arc
			if(pij < cijstar){ // le cout de l'arc est inférieur au coût minimum précédent
				cijstar = pij; // mise à jour du nouveau coût minimum
				jstar = las1.sommet(); // mise à jour du sommet correspondant au coût minimum
			}
		}
  		return new int[]{cijstar,jstar};
  	}

	static float[] validationStatistique(int n, int nruns){
	// validation statistique sur des graphes à n sommets
		float[] distancesRelatives = new float[nruns]; 
		for (int r = 0; r < nruns; r++){
			if (r%1000 == 0) System.out.print(".");
			LA[] g = grapheAleatoire(n);
			// calcul de la valeur du chemin de coût minimum  
			int[][] MA = calculerMA(g);	int[] M = MA[0]; 
			int coutMin = M[n-1];
			int cml = coutParMinimisationLocale(g);
			float distanceRelative = (float)(cml)/(float)coutMin ;
			distancesRelatives[r] = distanceRelative;
		}
		System.out.println();
		return distancesRelatives; 
	}

	static class LA{ // liste d'arcs. 
		int j, cij; LA r;
		LA(int j, int cij, LA r){ this.j = j; this.cij = cij; this.r = r;}
		int sommet(){return j;}
		int cout(){return cij;}
		LA reste(){return r;}
	}
	static boolean vide(LA l){return l == null;}
	
	static LA[] grapheAleatoire(int n){ /* Retourne un graphe aléatoire.
	Chaque sommet i de [0:n-1] envoie un nombre d'arcs quelconque, supérieur ou égal à 1,  
	vers les sommets de numéros plus élevés, donc vers les sommets de [i+1:n].
	Le sommet n-1 n'envoie aucun arc.
	Ce nombre d'arcs est le degré sortant du sommet i, noté ds(i).
	Le sommet i envoie au moins un arc vers un sommet de [i+1:n] et au plus un arc
	vers chacun d'eux. Son degré sortant, ds(i), est ≤ à n - (i+1), situation où 
	le sommet i envoie un arc vers chacun des sommets de numéros supérieurs. 
	On rappelle par ailleurs que le sommet i envoie au moins un arc.
	Donc : 1 ≤ ds(i) ≤ n-(i+1), autrement dit 1 ≤ ds(i) < n-i.
	Le coût de l'arc i -> j est aléatoire : nous choisissons la fonction de coût 
	c(i,j) = (j - i) + hasard(0, n+1), où hasard(0,n) est un entier au 
	hasard dans l'intervalle [0:n]. Elle "pénalise" en moyenne les arcs reliant
	des sommets de numéros très distants. 
	Exemples avec un graphe à n=20 sommets : s'il existe un arc 0 -> j=n-1,
	sa valeur sera (j-i) + hasard(0,n) =  n-1 + hasard(0,n) = 19 + hasard(0,20),
	donc en moyenne 19 + 10  = 29.
	S'il existe un arc 0 -> 3, sa valeur sera (3-0) + hasard(0,20), 
	donc en moyenne 3 + 10 = 13. */
		LA[] g = new LA[n];
		for (int i = 0; i < n-1; i++){ 
			int[] S = permutation(i+1,n); // S est une permutation de [i+1:n] 
			int dsi = hasard(1,n-i); // ds(i) au hasard, 1 ≤ ds(i) < n-i
			S = Arrays.copyOfRange(S,0,dsi); // les sommets vers lesquels i envoie un arc
			for (int j : S){ // pour tout arc i->j
				int cij = (j-i) + hasard(0,n); // coût de l'arc
				g[i] = new LA(j,cij,g[i]); // ajout de l'arc i -> j au graphe g.
			}
		}
		return g;	
	}

	static int hasard(int i, int j){
		Random r = new Random();
		return i + r.nextInt(j-i);
	}
	static int[] permutation(int inf, int sup){ int n = sup - inf;
		Random r = new Random();
		int[] T = new int[n];
		for (int i = 0; i<n; i++) T[i] = inf+i;
		for (int j = n-1; j>0; j--){ int i = hasard(0,j);
			permuter(T,i,j);
		}
		return T;
	}
	static void permuter(int[] T, int i, int j){
		int ti = T[i]; T[i] = T[j]; T[j] = ti;
	}
	static void afficher(LA[] g){ int n = g.length;
		for (int i = 0; i<n; i++){ System.out.printf("%d : ", i);
			for (LA las = g[i]; !vide(las); las = las.reste()) {
				int j = las.sommet(), pij = las.cout();
				System.out.printf(
					"(%d,%d) ", 
						j,pij
				) ;
			}
			System.out.println();
		}
	}
	
	static void descriptionGraphViz(LA[] g, String fileName){
	/* g est un graphe représenté par une table de liste d'arcs.
	Ecrit dans le fichier fileName la description du graphe du projet P 
	pour le logiciel graphViz. Cette description est à coller dans la 
	fenêtre gauche du site https://dreampuf.github.io/GraphvizOnline
	Voir aussi l'excellent site GraphViz Pocket Reference, 
	https://graphs.grevian.org */	
		try { int n = g.length;
			PrintWriter ecrivain;
	    	ecrivain =  new PrintWriter(new BufferedWriter(new FileWriter(fileName)));
			ecrivain.println("digraph g{ rankdir=LR;");    	
			for (int i = 0; i < n; i++) { 
				for (LA las = g[i]; (!vide(las)); las = las.reste()){ 
					// las : liste des arcs sortants
					int j = las.sommet(), pij = las.cout();
 					ecrivain.println(i + "->" + j + "[label=" + pij +  "]" + ";");
 				}
 			}
			ecrivain.println("}");	
			ecrivain.println("/* Description à coller dans la fenêtre gauche du site " +
				"https://dreampuf.github.io/GraphvizOnline */");
			ecrivain.println("/* Voir aussi l'excellent site GraphViz Pocket Reference, " +
				"https://graphs.grevian.org */");
			ecrivain.close();
		}
		catch(IOException e){ System.out.println("Erreur écriture");}
  	}	
  	
/* Calcul de la médiane */
	static float medianeIterative(float[] T){ int n = T.length;
	/* Retourne la valeur médiane de T[0:n]. C'est la valeur du tableau
	telle que T contient autant de valeurs ≤ à la médiane que de valeurs ≥ à m.
	Exemple  : 0,1,2,3 ==> médiane = 1 (indice (4-1)/2 = 3/2 = 1)
               0,1,2 ==> médiane = 1 (indice (3-1)/2 = 2/2 = 1 )
	De façon générale, avec la convention 0 ≤ p < n, la valeur médiane est la 
	p = (n-1)/2 ème valeur de T. 
	*/       
		return quickSelectIteratif(1 + (n-1)/2, T);
		// ou si l'on préfère : qselIteratif((n-1)/2, T)
	}
    static int segmenter(float[] T, int i, int j){
    // calcule une permutation des valeurs de T[i:j] qui vérifie 
    //           T[i:k]<= T[k:k+1] < T[k+1:j], et retourne l'indice k.
    // I(k,j') : T[i:k] <= T[k:k+1] < T[k+1:j']
        int h = hasard(i,j); 
        permuter(T,i,h);
        int k = i, jp = k+1; // I(k,j') est vraie
        while (jp < j)
            if (T[k] < T[jp]) // I(k,j'+1) est vraie
                jp = jp+1;
            else { permuter(T,jp,k+1); 
                permuter(T,k+1,k);
                // I(k+1,j'+1) est vraie
                k = k+1; // I(k,j'+1) est vraie
                jp = jp+1; // I(k,j') est vraie
            }
            // I(k,j) vraie, i.e. T[i:k] ≤ T[k:k+1] < T[k+1:j]
        return k;
    }    
	static void permuter(float[] T, int i, int j){
		float ti = T[i]; T[i] = T[j]; T[j] = ti;
	}
    
	public static float quickSelectIteratif(int p, float[] T){ int n = T.length;
		// 1 ≤ p ≤ n;
		return qselIteratif(p-1, T);
	}
	static float qselIteratif(int p, float[] T){ int n = T.length; // 0 <= p < n 
		int pprime = p , i = 0, j = n ; // I(p’, i, j)
 		while (!(pprime == 0 && j-i == 1)) { // I(p’,i,j) et non arrêt
        	int k = segmenter(T, i, j); 
        	int pppi = pprime + i ;
        	if ( i <= pppi && pppi < k ) // I(pprime, i, k)
         	{ j = k; } // I(p’, i, j)
       		else
       		if ( k <= pppi && pppi < k+1 ) // I(pprime-(k-i), k, k+1)
         		{ pprime = pprime-(k-i); i = k; j = k+1; } // I(p’, i, j)
       		else //  k+1 <= pppi && pppi < j ) // I(pprime - ((k+1) - i) , k+1, j)
         		{ pprime = pprime - ((k+1)-i); i = k+1; } // I(p’, i, j)
    	}	
    	// I(p’, i, j) et arrêt, donc la p-ème valeur de T[ 0 : n ] est T[i];
	    return T[i];
  	}
  	static float max(float[] T){
  		float max = Integer.MIN_VALUE;
  		for (float f:T) if (f > max) max = f;
  		return max;
  	}
}



/* 
-----------------------------------------------------------------------------
Exécution du programme pour graphe à 10 sommets et validation à 10 000 runs: 

graphe G :
0 : (3,10) (5,10) (1,8) (8,14) 
1 : (2,7) (3,3) (4,7) (8,10) (7,6) (9,17) (6,10) 
2 : (7,11) (9,7) (5,3) (4,8) (6,12) (3,10) (8,8) 
3 : (8,5) (9,14) (5,7) 
4 : (9,14) (8,5) (6,9) 
5 : (6,3) (8,7) 
6 : (8,8) 
7 : (8,9) (9,10) 
8 : (9,4) 
9 : 
M = [0, 8, 15, 10, 15, 10, 13, 14, 14, 18]
A = [0, 0, 1, 0, 1, 0, 5, 1, 0, 8]
Coût d'un chemin de coût minimum jusqu'en 9 : 18
0-(14)->8-(4)->9
affichage des chemins de coût minimum de 0 à tous les sommets :
Il n'y a pas de chemin de 0 à 0
0-(8)->1 coût = 8
0-(8)->1-(7)->2 coût = 15
0-(10)->3 coût = 10
0-(8)->1-(7)->4 coût = 15
0-(10)->5 coût = 10
0-(10)->5-(3)->6 coût = 13
0-(8)->1-(6)->7 coût = 14
0-(14)->8 coût = 14
0-(14)->8-(4)->9 coût = 18
Description du graphe dans le fichier g.graphviz
Coût par minimisation locale = 20
Validation statistique à 10000 runs
..........
Médiane des distances relatives : 1.444444
Max des distances relatives : 4.222222

-----------------------------------------------------------------------------
Exécution du programme pour graphe à 100 sommets et validation à 10 000 runs: 

graphe G :
0 : (17,37) (27,102) (70,157) (60,122) (25,102) (23,80) (31,80) (61,74) (83,94) (63,138) (82,97) (6,22) (87,149) (46,97) (30,32) (4,61) (29,86) (40,130) (44,112) (69,104) (90,132) (62,85) (19,53) (73,129) (59,72) (72,137) (50,142) (94,179) (8,67) (1,72) (42,86) (3,73) (26,96) (53,133) (67,124) (99,103) (24,79) (18,76) (85,119) (7,16) (80,90) (76,96) (52,138) (37,114) (97,195) (68,132) (14,97) (96,174) (41,81) (2,22) (47,54) (28,106) (54,83) (84,135) 
1 : (32,106) (10,41) (48,73) (66,81) (19,44) (75,117) (5,31) (88,113) (54,119) (33,90) (58,72) (46,124) (92,177) (85,146) (76,104) (39,53) (47,117) (40,39) (6,41) (20,65) (60,80) (68,144) (21,98) (18,82) (87,111) (67,139) (25,37) (84,114) (70,109) (55,113) (97,104) (14,36) (53,81) (4,3) (45,98) (82,145) (29,96) (89,183) (51,59) (98,149) (30,97) (22,21) (59,123) (31,126) (90,179) (72,152) (36,71) (24,115) (99,107) (69,116) (44,125) (64,135) (2,37) (12,12) (43,86) (77,118) (37,89) (96,111) (17,51) (38,56) (57,93) (81,82) (49,86) (28,74) (11,45) (13,81) (74,123) (65,127) (63,67) (79,151) (27,105) (9,52) (52,148) (41,66) (35,85) (26,48) (56,65) (23,107) (15,97) (42,72) (8,22) (7,66) (95,117) (93,103) (86,164) (73,99) (62,109) (78,133) (16,31) (34,87) (61,125) (83,102) (3,95) (71,122) (80,157) (50,70) (91,143) (94,164) 
2 : (19,55) (91,92) (36,126) (27,33) (38,95) (70,83) (39,48) (87,139) (69,112) (24,62) (80,172) (86,92) (13,64) (88,128) (8,31) (40,57) (9,67) (51,94) (12,61) (34,53) (58,146) (71,140) (5,100) (90,180) (77,78) (31,123) (35,101) (73,143) (55,68) (29,46) (10,58) (21,43) (92,159) (72,118) (45,94) (16,112) (76,110) (65,79) (97,96) 
3 : (47,86) (8,52) (33,68) (80,160) (54,66) (62,99) (25,36) (16,78) (27,89) (11,80) (63,68) (61,151) (89,166) (26,44) (70,127) (73,134) (98,177) (82,160) (57,87) (51,126) (79,170) (56,76) 
4 : (74,74) (7,89) (56,56) (6,19) (24,47) (52,126) (94,162) (91,162) (60,68) (68,112) 
5 : (47,54) (50,134) (97,129) (34,103) (42,50) (28,27) 
6 : (69,147) (16,27) (71,121) (17,57) (91,153) (20,89) (73,125) (19,86) (40,56) (25,36) (56,141) (90,168) (29,65) (84,143) (80,75) (39,66) (36,126) (52,83) (76,112) (77,137) (60,115) (55,54) (23,114) (86,80) (66,118) (99,97) (12,86) (75,100) (98,122) (72,97) (54,139) (30,24) (38,84) (65,72) (92,147) (97,166) (81,130) (79,84) (67,148) (78,126) (43,124) (49,100) (33,94) (87,88) (63,114) (27,115) (9,7) 
7 : (91,179) (82,155) (31,90) (35,125) (37,34) (14,40) (54,101) (12,64) 
8 : (79,117) (87,113) (68,75) (98,122) (35,68) (65,153) (96,157) (43,102) (10,56) (77,142) (57,57) (39,55) (60,58) (14,16) (76,127) (21,91) (61,145) (29,81) (93,121) (74,148) (72,91) (95,182) (92,178) (15,74) (31,79) (28,99) (66,133) (84,83) (9,10) (18,83) (67,88) (11,45) (69,140) (19,58) (47,99) (22,107) (91,154) (80,150) (90,102) (88,148) (78,106) (63,121) (23,83) (24,22) (25,23) (70,125) (27,83) (51,141) (73,110) (46,53) (42,51) (53,46) (12,76) (83,122) (49,86) (81,83) (30,79) (37,114) (41,119) (54,112) (52,115) (86,95) (48,119) (13,80) (99,116) (33,107) 
9 : (25,109) (60,108) (39,93) (83,78) (88,104) (70,124) (73,93) (14,70) (62,107) (77,92) (37,68) (74,157) (69,93) (64,142) (99,116) (93,114) (11,33) (33,78) (19,37) (92,105) (10,47) (81,100) (49,117) (38,43) (56,131) (54,86) (58,148) (16,15) (17,38) (61,148) (67,79) (82,104) (20,104) (87,84) (80,102) (98,119) (79,107) (50,98) (22,45) (53,119) (96,181) (57,121) (71,68) (52,54) (51,139) (47,73) (78,76) 
10 : (55,97) (72,65) (28,75) (52,77) (99,93) (12,76) (83,139) (11,8) (90,98) (21,18) (40,52) (50,106) (87,82) (20,86) (41,55) (73,109) (56,51) (18,83) (17,26) (31,53) (15,103) (66,111) (45,95) (24,20) (35,67) (82,86) (78,116) (44,70) (77,137) (58,132) (32,59) (37,76) (67,75) (88,171) (29,117) (25,48) (54,78) (19,10) (80,165) (34,24) (48,129) (93,108) (23,81) (74,156) (84,98) (70,144) (94,92) (81,117) 
11 : (47,101) (54,134) (51,110) (91,179) (95,149) (98,100) (31,48) (73,89) (92,167) (13,34) (81,159) (46,73) (67,98) (71,81) (23,32) (39,40) (12,77) (14,81) (30,96) (34,117) (62,121) (56,88) (41,67) (79,128) (24,103) (52,98) (40,114) (74,65) (48,104) (61,96) (37,79) (58,50) (45,38) (44,106) (70,155) (57,121) (85,110) (55,65) (38,36) (84,77) (26,17) (75,123) (78,137) (35,63) (64,78) (49,102) (60,141) (72,120) (19,54) (66,131) (27,19) (87,113) (94,140) (50,60) (77,90) (82,136) (16,49) (17,8) 
12 : (44,73) (14,67) (78,160) (80,89) (50,91) (63,144) (27,20) (45,35) (15,32) (99,137) (42,97) (94,159) (85,132) (59,120) (37,37) (39,45) 
13 : (89,84) (51,88) (15,41) (30,56) (53,100) (20,37) (96,138) (92,89) (72,75) (94,141) (95,89) (35,45) (56,129) (67,98) (21,26) (29,51) (59,63) (14,22) (42,62) (25,79) (74,143) (24,20) (71,59) (44,89) (34,63) (48,125) (62,119) (41,113) (66,84) (16,74) (75,135) (27,90) (37,64) (83,110) (76,125) (77,121) (36,52) (99,158) (33,23) (81,133) (18,56) (86,118) (69,80) (85,131) (64,66) (57,54) (26,54) (80,116) (49,57) (47,92) (28,99) (70,151) (93,172) (39,50) (58,61) (22,40) (63,97) (88,104) (91,91) (55,75) (84,156) (82,168) (40,104) (65,53) (46,82) (50,90) (32,60) (60,74) (45,113) (78,161) (79,82) (98,88) 
14 : (61,143) (65,114) (54,55) (73,115) (15,41) (23,93) (18,91) (52,134) (72,144) (76,96) (89,88) (27,40) (17,63) (93,174) (87,88) (82,120) (97,114) (47,45) (85,148) (96,179) (42,36) (58,127) (62,56) (67,73) (43,74) (48,92) (22,89) 
15 : (72,120) (78,96) (74,84) (47,57) (51,39) (38,56) (97,175) (88,134) (27,35) (31,57) (50,50) (79,109) (73,76) (28,61) (86,133) (98,112) (52,72) (76,99) (55,70) (64,61) (60,132) (62,103) (33,38) (40,101) (57,135) (20,87) (90,150) (89,118) (45,41) (29,66) (70,154) (16,30) (18,36) (22,39) (39,45) (36,72) (17,85) (41,82) (87,112) (37,114) (81,164) (58,54) (92,147) (63,109) (71,106) (34,58) (56,119) (24,87) (49,118) (61,140) (75,154) (59,126) (32,114) (54,92) (65,103) (85,109) (26,18) (25,43) (66,82) (23,81) (48,85) (44,116) (95,124) (43,44) (94,89) (46,85) (69,153) (30,40) (91,124) (82,138) (93,170) (53,67) (42,54) (84,122) (35,25) (77,88) (99,133) 
16 : (33,72) (72,136) (45,94) (81,136) (89,121) (26,97) (31,39) (90,123) (24,47) (84,133) (49,89) (60,70) (94,89) (18,63) (51,112) (42,45) (37,32) (73,149) (38,117) (93,166) (56,119) (53,110) (22,17) (57,73) (17,97) (68,100) (69,99) (44,78) (59,66) (25,42) (80,150) (50,106) (98,149) (30,76) (28,66) (95,79) (70,107) (52,65) (40,75) (34,73) (61,51) (76,150) (74,108) (83,113) (41,116) (79,111) (75,68) (64,147) 
17 : (21,40) (68,59) (92,119) (51,127) (59,83) (75,91) (52,108) (19,64) (62,66) (69,76) (58,63) (38,101) (41,75) (44,39) (29,79) (57,80) (24,102) (48,72) (99,116) (28,71) (30,61) (97,108) 
18 : (72,113) (58,98) (75,152) (81,106) (34,92) (96,107) (83,114) (65,59) (99,115) (79,109) (57,57) (55,101) (91,119) (61,79) (68,83) (48,114) (67,144) (94,122) (63,70) (70,80) (43,114) (53,89) (69,112) (59,60) (74,100) (42,74) (60,72) (54,112) (50,60) (80,130) (45,70) (51,41) (89,95) (39,87) (73,110) (26,90) (21,36) (52,115) (98,114) (85,102) (95,133) (97,150) (92,83) (93,114) (90,101) (88,144) (38,117) (71,102) (29,72) (87,141) (36,35) (62,93) (32,66) (33,60) (46,89) (86,109) (44,40) (24,28) (78,80) (20,101) (49,88) (77,152) (47,101) (30,102) (31,89) (82,89) (64,94) (23,44) (84,159) (25,73) (37,23) (41,33) (56,38) (19,42) (28,58) (66,78) (35,39) (40,97) (27,71) 
19 : (95,82) (67,90) (43,84) (40,99) (44,47) (86,70) (33,40) (92,151) (28,95) (32,81) (60,66) (22,71) (66,85) (61,123) (74,125) (25,70) (50,62) (20,73) (26,53) (82,112) (99,115) (41,26) (72,120) (87,154) (64,123) (46,121) (23,41) (34,70) (55,104) (75,86) (35,87) (39,67) (96,81) (80,82) (36,83) (31,108) (57,82) (68,136) (62,117) (76,72) (98,153) (97,131) (83,90) (63,99) (89,131) (94,91) (81,76) (91,105) (42,59) (45,72) (54,72) (77,115) (90,120) (71,127) (30,106) (37,61) (84,97) 
20 : (87,88) (61,118) (98,165) (78,108) (27,94) (23,87) (33,46) (54,53) (64,79) (28,19) 
21 : (25,50) (66,121) (38,35) (64,126) (67,126) (41,65) (93,130) (73,110) (43,91) (26,57) (88,98) (76,130) (72,91) (53,36) (68,106) (40,42) (27,72) (77,86) (36,89) (79,103) (69,61) (84,96) (49,90) (45,30) (42,56) (90,121) (32,96) (55,65) (56,114) (52,63) (48,86) (23,64) (60,63) (99,163) (71,64) (82,117) (44,47) (29,11) (70,146) (85,121) (81,132) (30,108) (92,85) (87,131) (57,65) (61,84) (47,113) (51,94) (78,94) (83,121) (97,96) (80,157) (96,137) (58,51) (39,44) (34,25) (37,61) (75,91) (62,116) (22,3) (95,111) (50,100) (94,87) (63,136) (35,99) (86,70) (46,36) (65,58) (91,88) (89,160) (24,6) (31,88) (59,41) (98,98) (54,77) (33,78) 
22 : (58,61) (68,139) (43,26) (61,65) (62,139) (72,134) (79,81) (75,143) (24,84) (60,93) (28,61) (97,128) (51,114) (53,60) (65,78) (90,129) (85,105) (49,35) (27,51) (34,44) (45,34) (55,93) (71,132) (94,169) (99,106) (57,132) (46,73) (89,107) (52,81) (67,47) (77,61) (88,75) (81,132) (32,10) (59,122) (44,66) (40,112) (78,93) (31,28) (25,18) (82,135) (29,101) (54,104) (39,101) (87,111) (95,151) (70,127) (30,52) (83,78) (98,146) (48,31) (23,48) (64,82) (92,91) (91,163) (86,77) (69,132) (35,38) (96,116) (63,97) (74,123) (80,154) (84,111) (36,16) (47,65) (93,76) (33,34) (38,21) (50,69) (73,131) (76,61) (42,117) (56,45) (26,76) (37,53) 
23 : (76,152) (67,128) (29,51) (25,16) (41,34) (42,59) (63,121) (40,102) (72,54) (92,143) (80,100) (47,53) (70,60) (38,94) (96,155) (97,83) (56,68) (49,97) (94,148) (27,93) (73,137) (68,108) (43,37) (91,158) (62,126) (26,19) (78,128) (39,30) (93,134) (44,98) (51,71) (32,57) (55,34) (52,87) (82,143) (61,59) (31,68) (74,75) (54,60) (77,120) (89,160) (33,53) (60,117) (24,49) (71,134) (98,83) (28,11) (50,40) (75,57) (81,138) (59,105) (86,144) (85,87) (65,105) (35,48) (84,155) (34,33) (57,76) (69,46) (30,28) (90,82) (45,25) (58,117) (53,100) (87,156) (79,133) (64,52) (37,56) (48,112) (66,54) (88,77) (46,100) (83,60) (99,129) (36,18) (95,146) 
24 : (76,130) (67,53) (88,98) (77,138) (83,157) (73,85) (26,50) (92,129) (59,80) (49,63) (44,74) (72,64) (41,80) (93,109) (97,115) (71,144) (79,127) (52,67) (69,55) (60,128) (63,72) (25,62) (55,49) (45,116) (81,77) (62,110) 
25 : (99,110) (57,76) (70,126) (95,86) (51,82) (27,87) (69,113) (92,153) (45,63) (49,85) (66,89) (75,54) (42,66) (34,64) (52,88) (96,159) (38,49) (71,47) (39,76) (47,44) (68,112) (97,163) (35,51) (37,32) (26,97) (58,48) (86,97) (61,90) (89,101) (76,100) (88,68) (87,89) (28,99) (73,135) (84,95) (85,80) (48,49) (50,118) (59,82) (94,100) (74,129) (32,99) (43,24) (67,133) (80,84) (40,109) (65,120) (78,96) (77,110) (81,90) (44,50) (53,36) (31,93) (79,139) (41,39) (93,131) (60,59) (54,57) (56,98) (90,127) (83,97) (82,83) (29,89) (55,98) 
26 : (65,70) (75,56) (40,49) (93,122) (86,84) (29,17) (77,62) (35,46) (52,35) (89,102) (42,72) (80,153) (83,78) (47,99) (45,69) (81,121) (85,117) (68,103) (99,139) (72,58) (97,131) (44,32) (57,85) (87,116) (55,85) (59,35) (95,89) (78,66) (61,51) (76,56) (39,14) (74,69) (28,35) (34,25) (84,87) (79,103) (37,41) (69,131) (27,46) (48,109) (88,66) (51,28) (38,64) (32,62) (58,110) (90,139) (98,152) (96,157) (50,115) (30,68) (53,30) 
27 : (59,37) (35,69) (93,75) (48,23) (40,86) (65,93) (77,87) (92,87) (51,91) (80,146) (71,65) (83,117) (74,120) (46,44) (73,130) (28,12) (34,65) (79,125) (58,97) (82,79) (52,35) (75,144) (90,155) (70,53) (81,81) (97,134) (29,89) (53,48) (86,82) (49,23) (44,105) (50,24) (31,93) (88,65) (84,135) (37,80) (55,78) (67,126) (76,126) (78,65) 
28 : (52,61) (31,32) (39,11) (63,115) (67,70) (96,91) (70,118) (94,128) (29,25) (78,111) (98,156) (88,132) (99,97) (42,71) (59,49) (55,29) (65,88) (85,130) (33,31) (51,30) (71,46) (32,19) (87,142) (46,58) (35,65) (49,84) (34,92) (48,112) (84,76) (62,40) (74,115) (69,98) (36,72) (68,85) (81,76) (82,124) (38,10) (50,82) (37,102) (79,123) (61,130) (60,99) (44,92) (90,76) (76,52) (97,140) (80,76) (54,63) (93,100) (53,108) (58,124) (92,131) (73,70) (43,109) (83,114) 
29 : (32,62) (47,103) (59,59) (80,71) (62,65) (89,88) (87,71) (38,90) (30,29) (46,32) (83,76) (88,102) (58,60) (70,109) (55,96) (36,51) (67,38) (92,108) (54,114) (42,70) (51,27) (76,112) (64,96) (93,118) (74,81) (48,33) (97,105) (96,134) (84,123) (43,16) (40,47) (79,82) (35,36) (78,53) (90,160) (75,63) (77,71) (95,134) (61,85) (45,72) (85,133) (68,52) (39,67) (44,59) (52,75) 
30 : (81,89) (87,104) (76,46) (75,122) (51,23) (74,59) (94,160) (88,117) (45,79) (66,104) (97,133) (70,90) (85,154) (44,52) (67,86) (49,117) (86,89) (37,95) (84,110) 
31 : (81,137) (46,23) (82,56) (84,61) (97,153) (64,84) (62,53) (68,63) (99,119) (36,69) (35,88) (96,118) (95,81) (92,130) (69,48) 
32 : (79,54) (86,116) (83,114) (93,90) (77,131) (69,97) (50,58) (59,103) (60,43) (73,112) (49,32) (84,101) (41,106) (56,115) (96,141) (64,90) (34,97) (72,75) (46,70) (65,87) (82,94) (66,43) (63,83) (95,66) (48,26) (45,46) (67,129) (98,129) (74,113) (36,100) (44,20) (85,72) (71,84) (91,67) (42,93) (54,50) (37,15) (51,113) (89,153) (35,10) (87,64) (62,43) (38,70) (40,62) (61,87) (70,56) (76,84) (55,107) (99,73) (57,47) (47,77) (92,103) (78,91) (68,119) 
33 : (73,82) (69,90) (98,110) (71,73) (64,42) (67,61) (52,58) (48,88) (51,85) (65,86) (49,24) (63,90) (92,153) (55,115) (80,71) (82,109) (53,34) (74,117) (45,76) (81,57) (50,46) (62,115) (78,121) (75,111) (93,105) (57,101) (41,81) (39,66) (94,129) (83,71) (86,53) (84,83) (58,38) (72,90) (79,109) (68,115) (37,34) (91,77) (56,78) (90,88) (77,102) (96,158) (61,108) (42,80) (76,139) (97,114) 
34 : (65,112) (38,47) (46,71) (82,84) (51,42) (74,112) (41,37) (83,83) (52,35) (69,112) (73,52) (75,50) (54,76) (85,57) (63,115) (39,56) (47,54) (81,48) (50,66) (94,74) (35,56) (45,47) (36,72) (78,66) (95,86) (59,107) (40,67) (42,51) (87,66) (90,57) (58,75) (92,70) (88,147) (79,58) (67,39) (72,84) (70,96) (76,120) (53,20) (99,153) (91,95) 
35 : (53,85) (95,113) (89,83) (91,100) (55,107) (96,110) (50,16) (75,118) (71,135) (46,103) (47,63) (98,91) (38,23) (56,66) (68,79) (37,56) (49,14) (74,89) (97,138) (99,75) (52,105) (60,112) (63,31) (90,71) (42,83) (59,47) (40,55) 
36 : (59,47) (46,28) (45,102) (94,100) (57,83) (91,125) (78,95) (50,29) (56,30) (77,71) (48,63) (74,66) (73,93) (68,32) (39,42) (90,117) (81,122) (40,12) (55,30) (89,126) (99,155) (84,118) (98,74) (67,86) (93,135) (38,37) 
37 : (89,111) (84,74) (43,7) (99,136) (44,93) (49,14) (59,62) (97,105) (70,79) (90,58) (61,37) (48,103) (57,68) (42,85) (45,8) (58,41) (47,32) (67,70) (65,32) (82,80) (51,75) (95,78) (72,111) (38,79) (40,72) (85,63) (53,18) (41,71) (79,64) (75,133) (56,118) (92,122) (87,68) (80,104) (66,70) (68,43) (81,140) (94,97) (98,70) (78,81) (73,75) (63,95) (62,76) (71,95) (39,6) 
38 : (81,68) (97,65) (52,82) (83,61) (74,125) (58,102) (78,88) (40,100) (99,102) (93,79) (88,117) (39,66) (65,104) (80,56) (70,107) (43,36) (73,122) (47,53) (71,108) (86,134) (57,100) (64,38) (49,68) 
39 : (93,88) (95,116) (87,80) (67,92) (91,105) (90,124) (96,109) (78,98) (66,115) (45,29) (46,78) (97,78) (56,48) (60,116) (84,81) (92,74) (64,53) (69,62) (58,103) (54,53) (49,47) (47,37) (40,56) (98,95) (74,73) (86,122) (94,130) (55,70) (44,77) (71,84) (51,50) (77,130) (70,37) (89,56) (57,104) (52,34) (41,34) (79,94) (83,65) (50,108) (63,77) (68,54) (82,99) (99,84) (65,71) (43,25) (48,90) (76,79) (62,91) (72,56) (61,40) (59,28) (53,29) (80,84) (85,138) (75,86) (81,69) (88,133) (42,25) (73,114) 
40 : (94,68) (65,65) (81,77) (84,114) (97,127) (48,98) (45,43) (90,55) (67,110) (80,128) (76,39) (59,109) (71,68) (87,82) 
41 : (91,109) (92,110) (53,20) (55,111) (62,77) (84,48) (69,43) (60,31) (50,60) (75,78) (79,87) (59,101) (61,102) (76,106) (86,123) (78,52) (87,135) (96,122) (64,121) (66,51) (98,66) (81,48) (88,77) (71,77) (95,121) (90,118) (56,16) (68,48) (82,63) (97,82) (58,26) (65,104) (52,76) (94,128) (77,51) (67,81) 
42 : (72,126) (54,24) (65,84) (63,115) (56,61) (70,82) (92,133) (58,52) (48,96) (66,105) (50,52) (55,64) (91,54) (98,113) (76,46) (88,139) (86,56) (52,71) (60,44) (43,58) (83,67) (80,123) (67,90) (89,113) (64,116) (68,49) (75,63) (73,60) (51,25) (90,61) (87,90) (62,54) (45,88) (99,93) (49,80) (46,81) (44,12) (95,103) (97,128) (84,132) (78,82) (77,45) (74,41) (82,70) (96,87) (47,59) (59,114) (79,101) (81,126) (71,122) (93,102) (61,95) 
43 : (96,126) (53,102) (95,81) (85,46) (86,77) (82,99) (50,56) (77,69) (63,110) (46,32) (92,138) (74,109) (52,9) (94,51) (88,135) (68,80) (67,53) (76,70) (79,66) (66,118) (70,122) (98,112) (69,91) (51,53) (54,63) (65,25) (97,99) (61,25) (84,134) (81,97) 
44 : (73,75) (65,69) (97,143) (77,45) (71,97) (80,45) (83,104) (87,45) (91,111) (69,70) (48,9) (92,74) (99,115) (86,63) (52,87) (49,65) (94,127) (51,7) (78,120) (54,56) (53,64) (93,108) (85,60) (72,60) (79,89) (68,77) (74,69) (81,103) (47,81) (63,23) (45,90) (82,65) (60,53) (98,102) (88,64) (67,85) (96,128) (84,108) (70,33) (55,60) (76,41) (46,59) (59,24) (58,79) (64,34) (66,73) 
45 : (48,25) (82,79) (81,63) (90,63) (74,92) (55,103) (72,55) (79,117) (91,81) 
46 : (58,22) (90,100) (49,53) (81,36) (77,47) (79,118) (57,103) (62,16) (98,110) (76,68) (74,49) (78,106) (52,14) (85,40) (97,95) (84,52) (59,63) (80,94) (68,40) (64,61) (66,70) (83,72) (99,108) (86,72) (71,93) (69,65) (63,104) (75,30) (96,73) (87,82) (56,54) (94,121) (91,99) (70,81) (89,101) (67,79) 
47 : (65,107) (71,86) (94,67) (91,86) (63,20) (53,7) (68,81) (64,23) (51,88) (70,67) (96,58) (83,50) (67,26) (88,140) (78,32) (61,69) (69,70) (56,96) (72,76) (79,107) (49,6) (77,127) (85,62) (50,85) (95,145) (89,103) (52,103) (90,125) (75,49) (97,70) 
48 : (96,133) (57,97) (85,49) (82,93) (53,88) (51,51) (92,69) (64,33) (91,99) (86,115) (74,109) (87,131) (55,56) (58,82) (79,66) (70,49) (90,126) (95,82) (89,57) (60,107) (97,137) (99,89) (77,44) (94,73) (84,103) (81,93) (61,74) (83,112) (67,32) (56,13) (63,51) (52,55) (49,100) (78,58) (80,106) (71,53) (54,73) (93,55) (73,122) (65,109) (88,95) (76,67) (59,76) (50,66) (68,53) (98,122) (72,80) (69,75) (66,43) 
49 : (99,81) (59,102) (62,49) (55,24) (94,46) (88,94) (63,17) (79,94) (73,64) (51,35) (75,100) (58,47) (64,97) (84,115) (82,74) (85,110) (67,66) (90,105) (91,85) (95,128) (61,101) 
50 : (97,48) (72,26) (56,51) (71,96) (87,59) (92,134) (77,123) (53,56) (63,110) (55,60) (62,53) (79,121) (64,108) (89,42) (84,83) (96,89) (60,31) (86,130) (51,91) (93,93) (85,71) (74,30) (54,6) (57,71) (70,67) (58,15) (82,76) (67,57) (90,45) (88,55) (65,69) (69,46) (78,96) (59,72) (68,72) (73,63) (94,103) (81,87) (91,133) 
51 : (80,42) (52,100) (69,28) (90,100) (94,142) (91,97) (83,124) (85,120) (79,64) (55,20) (56,48) (96,122) (59,45) (73,70) (78,122) (58,62) (61,73) (81,57) (62,45) (95,53) (74,41) (77,30) (82,96) (92,56) (86,100) (68,20) (64,60) (87,126) (65,33) (97,51) (57,84) (89,60) (63,48) (66,101) (84,127) (76,55) (93,104) (99,145) (60,40) (71,116) (53,53) (72,89) (98,111) (88,134) (75,59) (54,77) 
52 : (73,72) (98,96) (69,97) (95,88) (61,66) (65,65) (86,133) (85,64) (63,28) (77,121) (96,77) (90,134) (59,82) (92,133) (80,41) (62,100) (71,90) (70,42) (60,8) (58,16) (75,85) (88,55) (67,19) (97,135) 
53 : (89,49) (95,49) (86,85) (81,102) (72,42) (70,55) (98,132) (87,113) (84,78) (62,76) (99,85) (56,71) (66,34) (79,77) (61,43) (54,4) (80,113) (88,103) (67,37) (92,111) 
54 : (87,54) (76,55) (89,73) (83,100) (88,133) (97,47) (63,86) (90,91) (61,83) (65,45) (55,6) (79,102) (86,70) (99,114) (72,35) (66,66) (78,121) (74,63) (82,77) 
55 : (89,67) (71,108) (94,75) (58,55) (95,89) (67,19) (91,92) (97,122) (59,90) (70,24) (85,83) (80,122) (84,113) (74,72) (60,44) (99,51) (90,36) (83,28) 
56 : (97,65) (58,5) (61,65) (74,79) (86,40) (83,45) (77,79) (78,109) (79,58) (96,129) (73,55) (65,80) (57,100) (92,128) (81,104) (70,104) (91,64) (60,45) (93,80) (68,68) (99,112) (69,102) (82,121) (87,82) (62,77) (90,99) (63,63) (95,60) (66,86) (89,40) (59,35) (76,108) (84,32) (72,30) (88,80) 
57 : (70,76) (69,41) (85,72) (84,59) (66,11) (96,69) (94,117) (88,86) (71,80) (73,59) (86,39) (95,92) (87,35) (72,90) (74,111) (78,83) (93,70) (81,77) (59,64) (91,74) (92,45) (80,71) (60,76) (64,33) (83,52) (75,76) 
58 : (73,107) (82,31) (89,71) (94,127) (99,100) (59,74) (74,104) (80,120) (76,110) (70,96) (96,69) (75,38) (87,51) (78,66) (77,44) (81,54) (93,45) (91,108) (63,10) (67,89) (85,107) (65,91) (64,87) (71,45) (68,54) (98,111) (66,11) (83,62) (62,62) (86,116) (97,87) (60,53) (79,60) (95,64) (88,127) (92,94) (72,86) 
59 : (81,61) (64,68) (79,28) (88,33) (94,88) (77,29) (92,122) (68,32) (69,101) (87,68) (75,91) (62,101) (86,57) (74,17) (61,39) (70,27) (98,66) (65,17) (91,47) (66,104) (99,123) (76,40) (95,67) (89,103) (82,40) (97,48) (60,17) (63,32) (90,46) (80,31) (85,92) (83,102) (78,58) (73,108) 
60 : (64,42) (69,36) (95,65) (73,49) (62,29) (97,103) (90,86) (66,72) (98,65) (86,112) (77,75) (87,84) (61,75) (96,87) (68,101) 
61 : (66,58) (77,36) (75,91) (72,62) (65,29) (82,23) (81,110) (78,69) (94,40) (91,57) (67,39) (95,56) (63,57) 
62 : (84,59) (91,53) (80,114) (65,96) (96,66) (63,12) (76,80) (71,34) (66,22) (79,85) (89,89) (75,88) (86,94) (70,59) (83,120) (87,49) (90,122) (77,65) (81,54) (67,27) (92,33) (69,60) (74,28) (99,124) (97,47) (98,83) (95,67) (85,110) (78,66) 
63 : (66,29) (82,60) (90,49) (98,132) (96,49) (64,20) (81,84) (91,95) (87,28) 
64 : (87,29) (84,103) (98,112) (89,29) 
65 : (69,21) (78,37) (97,39) (90,35) (91,105) (67,64) (84,39) (70,50) (82,98) (71,46) (85,28) (74,11) (77,24) (72,95) (89,51) (92,29) (99,111) (80,108) 
66 : (76,79) (85,53) 
67 : (70,48) (85,36) (75,16) (72,42) (74,10) (80,95) (79,109) (77,18) (99,45) (96,87) (89,58) (90,119) (76,37) (87,36) (73,62) (68,100) (81,102) (94,85) (86,95) (95,69) (84,67) (92,59) 
68 : (97,60) (73,48) 
69 : (74,32) (97,93) (81,26) (88,51) 
70 : (94,55) (78,70) (73,37) (92,96) (82,18) (90,64) (83,42) (89,63) (96,33) (88,41) (84,16) (98,95) (77,80) (87,31) (97,75) (79,74) (93,89) (99,52) (72,33) (71,74) (95,43) (85,114) 
71 : (96,103) (85,42) (93,83) (76,7) (73,20) (79,68) (74,79) (99,82) (97,48) (83,106) (94,83) (78,75) (80,54) (82,94) (87,76) (89,48) (84,34) (95,98) (88,55) (72,71) (91,98) (77,41) (81,35) (90,50) (86,16) (98,114) 
72 : (91,101) (88,89) (74,5) (81,75) (97,108) (84,89) (93,25) (90,105) 
73 : (87,36) 
74 : (98,120) (87,76) (78,99) (92,84) (89,70) (85,12) (95,21) (97,71) (76,94) (79,73) (91,30) (88,18) 
75 : (83,71) (88,61) (79,12) (95,26) (90,94) (77,52) (76,65) (86,46) (82,14) (81,73) (78,83) (96,97) 
76 : (97,104) (87,76) 
77 : (86,15) (84,17) 
78 : (96,18) (86,63) (91,96) 
79 : (96,48) (89,86) (82,72) (84,29) (80,34) (88,95) (93,16) (92,36) (87,18) (85,69) (94,110) (81,18) 
80 : (84,75) (92,101) (86,65) (83,38) (97,49) (98,94) (88,61) (82,83) (94,58) (90,107) (89,26) (93,99) 
81 : (99,91) (96,50) (84,30) (87,103) (98,111) (83,97) (92,93) (90,56) (95,76) (85,7) (94,23) (88,20) (82,97) (89,42) 
82 : (95,97) (89,34) (97,64) 
83 : (93,57) (90,52) (89,102) (84,93) (86,69) (92,87) (87,66) (91,21) (95,88) (94,24) (96,46) (98,33) (97,23) 
84 : (99,59) (98,67) (93,95) (85,73) (88,75) (95,93) (91,14) (94,71) (97,68) (86,99) (87,77) (96,47) (90,8) (89,43) 
85 : (91,76) (95,28) (88,68) (99,72) (87,32) (94,20) (90,41) (92,37) (93,37) (96,26) 
86 : (89,99) (93,43) (90,26) (95,64) (94,26) (96,35) (99,55) (92,49) (88,21) 
87 : (98,66) (89,20) (96,73) (99,33) (88,70) (93,92) (97,43) (90,70) (95,53) (94,60) (91,69) (92,42) 
88 : (90,93) 
89 : (95,19) (92,88) 
90 : (98,105) (95,21) 
91 : (95,73) (98,84) (96,40) 
92 : (97,84) (99,80) (94,76) 
93 : (97,40) (96,81) 
94 : (95,50) (96,71) (98,7) (99,27) (97,26) 
95 : (97,15) 
96 : (98,69) (97,14) (99,65) 
97 : (98,50) (99,100) 
98 : (99,76) 
99 : 
M = [0, 72, 22, 73, 61, 103, 22, 16, 53, 29, 76, 62, 80, 86, 56, 97, 44, 37, 76, 53, 111, 65, 61, 80, 71, 58, 79, 55, 67, 68, 32, 80, 71, 93, 75, 81, 77, 50, 72, 56, 78, 79, 81, 57, 76, 58, 89, 54, 78, 60, 79, 55, 66, 61, 65, 71, 91, 110, 82, 72, 74, 74, 85, 74, 77, 82, 93, 80, 75, 83, 93, 97, 100, 117, 89, 96, 78, 85, 86, 100, 90, 109, 97, 94, 102, 101, 100, 102, 105, 106, 107, 114, 111, 116, 106, 108, 104, 106, 113, 103]
A = [0, 0, 0, 0, 0, 1, 0, 0, 2, 6, 9, 9, 7, 2, 7, 14, 9, 0, 0, 0, 6, 2, 16, 0, 21, 6, 11, 2, 27, 2, 0, 0, 22, 19, 2, 32, 22, 7, 9, 37, 6, 19, 39, 37, 17, 37, 43, 0, 27, 47, 27, 30, 43, 47, 53, 54, 48, 8, 52, 0, 52, 0, 0, 47, 47, 43, 58, 47, 51, 51, 39, 9, 54, 71, 59, 67, 30, 51, 47, 59, 0, 69, 61, 0, 77, 74, 77, 63, 59, 64, 55, 2, 65, 79, 49, 51, 78, 51, 94, 0]
Coût d'un chemin de coût minimum jusqu'en 99 : 103
0-(103)->99
affichage des chemins de coût minimum de 0 à tous les sommets :
Il n'y a pas de chemin de 0 à 0
0-(72)->1 coût = 72
0-(22)->2 coût = 22
0-(73)->3 coût = 73
0-(61)->4 coût = 61
0-(72)->1-(31)->5 coût = 103
0-(22)->6 coût = 22
0-(16)->7 coût = 16
0-(22)->2-(31)->8 coût = 53
0-(22)->6-(7)->9 coût = 29
0-(22)->6-(7)->9-(47)->10 coût = 76
0-(22)->6-(7)->9-(33)->11 coût = 62
0-(16)->7-(64)->12 coût = 80
0-(22)->2-(64)->13 coût = 86
0-(16)->7-(40)->14 coût = 56
0-(16)->7-(40)->14-(41)->15 coût = 97
0-(22)->6-(7)->9-(15)->16 coût = 44
0-(37)->17 coût = 37
0-(76)->18 coût = 76
0-(53)->19 coût = 53
0-(22)->6-(89)->20 coût = 111
0-(22)->2-(43)->21 coût = 65
0-(22)->6-(7)->9-(15)->16-(17)->22 coût = 61
0-(80)->23 coût = 80
0-(22)->2-(43)->21-(6)->24 coût = 71
0-(22)->6-(36)->25 coût = 58
0-(22)->6-(7)->9-(33)->11-(17)->26 coût = 79
0-(22)->2-(33)->27 coût = 55
0-(22)->2-(33)->27-(12)->28 coût = 67
0-(22)->2-(46)->29 coût = 68
0-(32)->30 coût = 32
0-(80)->31 coût = 80
0-(22)->6-(7)->9-(15)->16-(17)->22-(10)->32 coût = 71
0-(53)->19-(40)->33 coût = 93
0-(22)->2-(53)->34 coût = 75
0-(22)->6-(7)->9-(15)->16-(17)->22-(10)->32-(10)->35 coût = 81
0-(22)->6-(7)->9-(15)->16-(17)->22-(16)->36 coût = 77
0-(16)->7-(34)->37 coût = 50
0-(22)->6-(7)->9-(43)->38 coût = 72
0-(16)->7-(34)->37-(6)->39 coût = 56
0-(22)->6-(56)->40 coût = 78
0-(53)->19-(26)->41 coût = 79
0-(16)->7-(34)->37-(6)->39-(25)->42 coût = 81
0-(16)->7-(34)->37-(7)->43 coût = 57
0-(37)->17-(39)->44 coût = 76
0-(16)->7-(34)->37-(8)->45 coût = 58
0-(16)->7-(34)->37-(7)->43-(32)->46 coût = 89
0-(54)->47 coût = 54
0-(22)->2-(33)->27-(23)->48 coût = 78
0-(54)->47-(6)->49 coût = 60
0-(22)->2-(33)->27-(24)->50 coût = 79
0-(32)->30-(23)->51 coût = 55
0-(16)->7-(34)->37-(7)->43-(9)->52 coût = 66
0-(54)->47-(7)->53 coût = 61
0-(54)->47-(7)->53-(4)->54 coût = 65
0-(54)->47-(7)->53-(4)->54-(6)->55 coût = 71
0-(22)->2-(33)->27-(23)->48-(13)->56 coût = 91
0-(22)->2-(31)->8-(57)->57 coût = 110
0-(16)->7-(34)->37-(7)->43-(9)->52-(16)->58 coût = 82
0-(72)->59 coût = 72
0-(16)->7-(34)->37-(7)->43-(9)->52-(8)->60 coût = 74
0-(74)->61 coût = 74
0-(85)->62 coût = 85
0-(54)->47-(20)->63 coût = 74
0-(54)->47-(23)->64 coût = 77
0-(16)->7-(34)->37-(7)->43-(25)->65 coût = 82
0-(16)->7-(34)->37-(7)->43-(9)->52-(16)->58-(11)->66 coût = 93
0-(54)->47-(26)->67 coût = 80
0-(32)->30-(23)->51-(20)->68 coût = 75
0-(32)->30-(23)->51-(28)->69 coût = 83
0-(16)->7-(34)->37-(6)->39-(37)->70 coût = 93
0-(22)->6-(7)->9-(68)->71 coût = 97
0-(54)->47-(7)->53-(4)->54-(35)->72 coût = 100
0-(22)->6-(7)->9-(68)->71-(20)->73 coût = 117
0-(72)->59-(17)->74 coût = 89
0-(54)->47-(26)->67-(16)->75 coût = 96
0-(32)->30-(46)->76 coût = 78
0-(32)->30-(23)->51-(30)->77 coût = 85
0-(54)->47-(32)->78 coût = 86
0-(72)->59-(28)->79 coût = 100
0-(90)->80 coût = 90
0-(32)->30-(23)->51-(28)->69-(26)->81 coût = 109
0-(74)->61-(23)->82 coût = 97
0-(94)->83 coût = 94
0-(32)->30-(23)->51-(30)->77-(17)->84 coût = 102
0-(72)->59-(17)->74-(12)->85 coût = 101
0-(32)->30-(23)->51-(30)->77-(15)->86 coût = 100
0-(54)->47-(20)->63-(28)->87 coût = 102
0-(72)->59-(33)->88 coût = 105
0-(54)->47-(23)->64-(29)->89 coût = 106
0-(54)->47-(7)->53-(4)->54-(6)->55-(36)->90 coût = 107
0-(22)->2-(92)->91 coût = 114
0-(16)->7-(34)->37-(7)->43-(25)->65-(29)->92 coût = 111
0-(72)->59-(28)->79-(16)->93 coût = 116
0-(54)->47-(6)->49-(46)->94 coût = 106
0-(32)->30-(23)->51-(53)->95 coût = 108
0-(54)->47-(32)->78-(18)->96 coût = 104
0-(32)->30-(23)->51-(51)->97 coût = 106
0-(54)->47-(6)->49-(46)->94-(7)->98 coût = 113
0-(103)->99 coût = 103
Description du graphe dans le fichier g.graphviz
Coût par minimisation locale = 368
Validation statistique à 10000 runs
..........
Médiane des distances relatives : 2.327434
Max des distances relatives : 5.990566

*/